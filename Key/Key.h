/*****************************************************************************

//		               按键模块标准接口
//两种采集方式：
//SUPPORT_KEY_ID方式获得唯一键值，不能识别组合键
//SUPPORT_KEY_MASK方式获得每个键的按下状态，可识别组合键
****************************************************************************/
#ifndef __KEY_H
#define __KEY_H


/*******************************************************************************
					                  全局定义说明
********************************************************************************/

//是否支持硬按键功能,不支持是不含此模块(如红外等可以不支持)
//#define SUPPORT_KEY

//是否支持全局加速，支持后，项目文件里应包含KeyAccelerate模块
//#define SUPPORT_KEY_ACCELERATE

/*******************************************************************************
					                  内部配置区
********************************************************************************/
#ifdef SUPPORT_QGUI   //使用QGUI时专用实现
  #include "Key_QGUI.h"
#else
  #include "KeyDef.h"        //用户的私有实现
#endif

#ifdef SUPPORT_KEY_ID 
  #define KeySize_t    unsigned char  //不需定义键值
  #define _INVALID_KEY    0xff         //定义无效键值
#endif

#ifdef SUPPORT_KEY_MASK //掩码时，不定义默认只响应5个按键
  #ifndef KeySize_t
    #define KeySize_t    unsigned char
  #endif
  #define _INVALID_KEY    0         //定义无效键值
#endif

/*******************************************************************************
					                     相关结构
*******************************************************************************/
//按键管理器
struct _Key{
  KeySize_t KeyId;         //按键值ID 
  unsigned char Index;		//按键计数器
};

extern struct _Key Key;

/*******************************************************************************
					                     相关函数
*******************************************************************************/

//---------------------------------初始化函数-----------------------------------
void Key_Init(void);

//------------------------------------任务函数----------------------------------
//每8ms调用一次以获取键值
void Key_Task(void);

//----------------------------------获得最后一次键值函数------------------------
#define Key_GetKeyId()   (Key.KeyId)


/*******************************************************************************
					                    回调函数-底层
*******************************************************************************/
//--------------------------------初始始IO--------------------------------------
#include "IoCtrl.h" //直接实现
#define Key_cbCfgIO()       CfgKey()

//---------------------------------得到原始键值函数-----------------------------
//SUPPORT_KEY_ID时需实现
unsigned char Key_cbGetOrgKeyId(void);

//-----------------------------判断对应键是否按下-----------------------------
//SUPPORT_KEY_MASK时需实现
unsigned char Key_cbIsKeySel(unsigned char KeySel);

//------------------------判断当前保持按键是否为加速键------------------------
//SUPPORT_KEY_ACCELERATE时需实现,一般将上下键设置为加速键
unsigned char Key_cbIsAccelarateKey(KeySize_t Key);

/*******************************************************************************
					                    回调函数-上层
*******************************************************************************/

//----------------------------由物理键值ID得到键值-----------------------------
//SUPPORT_KEY_ID时需实现
KeySize_t Key_cbKeyId2Key(KeySize_t KeyId);

//-------------------------------短按键通报函数---------------------------------
//用回调的方式实现按键处理
void Key_cbShortNotify(KeySize_t Key);

//-------------------------------长按键通报函数---------------------------------
//不支持时可实现为空
void Key_cbLongNotify(KeySize_t Key);

//-------------------------------保持按键通报函数------------------------------
//不支持时可实现为空
void Key_cbKeepNotify(KeySize_t Key);

#endif

