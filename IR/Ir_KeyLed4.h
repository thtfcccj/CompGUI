/***************************************************************************

      红外接收程序之对码-在4个键值及4位数码管应用时的实现
使用时，需确保SUPPORT_IR_KEY_MATCH被全局定义，IR_DRV_KEY_COUNT为4
***************************************************************************/
#ifndef __IR_KEY_LED4_H
#define __IR_KEY_LED4_H
#ifdef SUPPORT_IR_KEY_MATCH    //支持对码时

/***************************************************************************
                              相关说明
***************************************************************************/
//IR的对码方式定义为:
//1.按住某个没有定义的键长时间不放或连续按该键
//2.触发进入IR显示界面,显示方式为4屏:
// "ENTR":闪动确认键对码,连续接两次有效
// "EXIT":闪动退键对码,连续接两次有效
// "UP":  闪动上键对码,连续接两次有效
// "DOWN":闪动下键对码,连续接两次有效
// "SAVE":提示保存,按"确认"键确认,结束对码
//在操作过程中,超时将自动退出

//程序内部对码操作步骤为:
//多次按同一新键值时，确认进入对码模式->
// -> 清除所码值信息->在新键值通报回调中保存码值->
// -> 全部键值识别完成,保存码值,或取消对码时恢复原有码值

/***************************************************************************
                              相关配置
***************************************************************************/

//定义支持的键值，固定为4
#define IR_KEY_LED4_KEY_COUNT    4

//定义进入识别按键的相同按键次数时间
#define IR_KEY_LED4_IDENT_ENTER_COUNT    10

//定义退出识别按键的等待时间
#define IR_KEY_LED4_IDENT_EXIT_COUNT      80

//定义用户按键频率
#define IR_KEY_LED4_KEY_SPACE_COUNT      4

/***************************************************************************
                              相关结构
***************************************************************************/

struct _Ir_KeyLed4{
  unsigned char Timer;        //定时器
  unsigned char KeyCount;     //按键次数计数器  
  //识别状态,见定义:,其它为确认保存状态
  volatile signed char IdentState;  
  unsigned char Flag;         //相关标志,见定义
};

//识别状态定义为:
//0: 不在识别状态
//1~至IR_KEY_LED4_KEY_COUNT: 为按键识别状态
//大于IR_KEY_LED4_KEY_COUNT: 为确认保存状态

//相关标志定义为:
#define IR_KEY_LED4_REPEAT     0x80  //重复按键标志

//因每个系统中存在一个红线接收,故直接实例化
extern struct _Ir_KeyLed4  Ir_KeyLed4; 

/***************************************************************************
                              相关函数
***************************************************************************/

//-----------------------------初始化函数-----------------------------
void Ir_KeyLed4_Init(signed char Inited);

//--------------------------判断是否在按键识别中函数--------------------
//识别状态具有最高优先级
//signed char Ir_KeyLed4_IsIdent(void);
#define Ir_KeyLed4_IsIdent() (Ir_KeyLed4.IdentState)

//-----------------------------按键处理函数---------------------------
//在识别状态调用此函数处理按键
void Ir_KeyLed4_Key(unsigned char Key);

//-------------------------------任务函数-------------------------------
//放入256mS进程中扫描
void Ir_KeyLed4_Task(void);

#else //#ifdef SUPPORT_IR_KEY_MATCH    //不支持对码时
  #define Ir_KeyLed4_Init() do{}while(0)
  #define Ir_KeyLed4_IsIdent() (0)   //永不在识别状态
  #define Ir_KeyLed4_Key(key) do{}while(0)
  #define Ir_KeyLed4_Task()  do{}while(0)
#endif //SUPPORT_IR_KEY_MATCH

/***************************************************************************
                              回调函数
****************************************************************************/

//------------------------Ir_KeyLed4退出时恢复现场------------------------
//即恢复原有显示状态
void Ir_KeyLed4_cbLedInit(void);

#endif //#define __IR_GUI_H

