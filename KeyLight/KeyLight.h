/*****************************************************************************

		              扫描时置指示灯与获得按键

//此模块负责驱动指示灯显示,以及扫描按键以获得当前按键按下状态(支持最多32个键值)
//此模块不负责获取具体键值，即需配合Key模块使用：
//  在KeyLight_Task()返回下次扫描按键位置(多键值模式)，或返回0时调用Key_Task();
//此模块实现策略为: 1ms置输入等待读取+1m读键值后置指示灯

******************************************************************************/

#ifndef _KEY_LIGHT_H
#define _KEY_LIGHT_H

/*****************************************************************************
                            相关配置
******************************************************************************/

//指示灯扫描总数, >= 1; <= 127
#ifndef KEY_LIGHT_L_SCAN_COUNT     
  #define KEY_LIGHT_L_SCAN_COUNT   1   
#endif

//按键扫描总数, >= 1; ,获取键值是多键模式时，应<=4;否则 <= 127
#ifndef KEY_LIGHT_K_SCAN_COUNT     
  #define KEY_LIGHT_K_SCAN_COUNT   4   
#endif

//定义每次扫描按键个数，<= 8;
#ifndef KEY_LIGHT_K_BIT_COUNT     
  #define KEY_LIGHT_K_BIT_COUNT   7   
#endif


/*****************************************************************************
                            相关结构
******************************************************************************/

struct _KeyLight{
  unsigned char Key[KEY_LIGHT_K_SCAN_COUNT];    //当前扫描到的键值，1为有 
  unsigned char Light[KEY_LIGHT_L_SCAN_COUNT];  //指示灯状态，1为亮     
    
  unsigned char KeyPos;    //按键扫描时位置,负表示等待周期
  unsigned char LightPos;  //指示灯扫描时位置
};

extern struct _KeyLight KeyLight; //直接单例化


/*****************************************************************************
                            相关函数
******************************************************************************/

//-------------------------初始化函数---------------------------------------
void KeyLight_Init(void);

//-----------------------------任务函数------------------------------------
//1ms调用一次,返回负：准备状态，正：下次扫描按键位置
signed char KeyLight_Task(void);

/*****************************************************************************
                            回调函数接口
******************************************************************************/
#include "IoCtrl.h"  //部分直接实现

//---------------------------IO初始化-------------------------------
//void KeyLight_cbInitIo(signed char Pos);
#define KeyLight_cbInitIo() CfgKlIo()

//-----------------------------置按键扫描位置-------------------------------
//< 0表示关闭扫描，否则还需同时将读按键IO置为输入
void KeyLight_cbSetKeyScan(signed char Pos);

//----------------------------得到当前键值----------------------------------
//对应位为1表示按下了
//unsigned char KeyLight_cbGetKeyVol();
#define KeyLight_cbGetKeyVol() GetKlKey()

//----------------------------置扫描灯扫描位置-------------------------------
//< 0表示关闭扫描，需同时将写指示灯IO置为输出
void KeyLight_cbSetLightScan(signed char Pos);

//----------------------------置当前指示灯值---------------------------------
//1为亮
//void KeyLight_cbSetLightVol(unsigned char Light);
#define KeyLight_cbSetLightVol(light) SetKlLight(light)

#endif //#ifdef _KEY_LIGHT_H

